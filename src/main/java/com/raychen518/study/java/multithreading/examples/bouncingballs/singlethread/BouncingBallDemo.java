package com.raychen518.study.java.multithreading.examples.bouncingballs.singlethread;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * <pre>
 * This class is used to make a demo about bouncing balls (generated by a single thread).
 * </pre>
 */
public class BouncingBallDemo {
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {

			public void run() {
				JFrame frame = new BouncingBallFrame();
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.setVisible(true);
			}

		});
	}
}

/**
 * <pre>
 * This class represents a frame which is used to contain bouncing balls.
 * </pre>
 */
class BouncingBallFrame extends JFrame {

	private static final long serialVersionUID = -5889567709906754958L;

	/**
	 * How many steps a bouncing ball should move before it stops.
	 */
	private static final int MOVE_STEPS = 1000;

	/**
	 * The delay (unit: millisecond) after each move of a bouncing ball.
	 */
	private static final int MOVE_DELAY = 3;

	private BallComponent ballComponent;

	public BouncingBallFrame() {
		setTitle("Bouncing Balls");

		ballComponent = new BallComponent();

		add(ballComponent, BorderLayout.CENTER);

		JPanel buttonPanel = new JPanel();

		// Add the "Start" button.
		addButton(buttonPanel, "Start", new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent actionEvent) {
				addBall();
			}

		});

		// Add the "Close" button.
		addButton(buttonPanel, "Close", new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent actionEvent) {
				System.exit(0);
			}

		});

		add(buttonPanel, BorderLayout.SOUTH);

		pack();
	}

	/**
	 * Add the specified button to its specified container, with its specified
	 * title set and its specified action listener added.
	 * 
	 * @param container
	 *            The specified button's container.
	 * @param title
	 *            The specified button's title.
	 * @param actionListener
	 *            The specified button's action listener.
	 */
	private void addButton(Container container, String title, ActionListener actionListener) {
		JButton button = new JButton(title);
		container.add(button);
		button.addActionListener(actionListener);
	}

	/**
	 * Add a bouncing ball.
	 */
	private void addBall() {
		try {
			Ball ball = new Ball();
			ballComponent.add(ball);

			// Animate a bouncing ball.
			for (int i = 1; i <= MOVE_STEPS; i++) {
				ball.move(ballComponent.getBounds());
				ballComponent.paint(ballComponent.getGraphics());

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				// Cause the currently executing thread to sleep for the
				// specified number of milliseconds.
				// Without this sleep, all the ball's moves will be done
				// instantly, causing the move process cannot be viewed clearly.
				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				Thread.sleep(MOVE_DELAY);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}
